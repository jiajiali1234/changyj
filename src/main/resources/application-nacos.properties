################################## <<Nacos注册中心>> ##################################
# 配置内容详见:
#   https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-discovery.adoc
####  需要修改的配置迁移到了bootstrap.properties中，以下配置不用需改
####################################################################
# 是否集成Ribbon:一般都设置成true即可
ribbon.nacos.enabled=true
# 权重:取值范围 1 到 100，数值越大，权重越大
spring.cloud.nacos.discovery.weight=1
# 网卡名:当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址
#spring.cloud.nacos.discovery.network-interface=
# 注册的IP地址:优先级最高
#spring.cloud.nacos.discovery.ip=xxx
# 注册的端口:默认值:-1, 默认情况下不用配置，会自动探测
#spring.cloud.nacos.discovery.port=
# Metadata:使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息
spring.cloud.nacos.discovery.metadata.company=ths.com.cn
spring.cloud.nacos.discovery.metadata.developer=jdp5.0
spring.cloud.nacos.discovery.metadata.preserved.register.source=THSBOOT_CLOUD
# 指定注册发现中心Nacos分组
# spring.cloud.nacos.discovery.group=DEFAULT_GROUP
# 集群:Nacos集群名称
#spring.cloud.nacos.discovery.cluster-name=${spring.cloud.nacos.config.cluster-name}
# 接入点:地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址
#spring.cloud.nacos.config.endpoint=xx
# 是否开启Nacos Watch:可以设置成false来关闭 watch
spring.cloud.nacos.discovery.watch.enabled=true
# 在应用程序启动时从本地缓存空间中加载注册信息。
spring.cloud.nacos.discovery.naming-load-cache-at-start=true
# 监视延迟，从nacos服务器提取新服务的持续时间。
spring.cloud.nacos.discovery.watch-delay=30000
# IP删除超时时间(单位:second)
spring.cloud.nacos.discovery.ip-delete-timeout=180
# 心跳间隔(单位:second)
spring.cloud.nacos.discovery.heart-beat-interval=30
# 心跳暂停(单位:second)
spring.cloud.nacos.discovery.heart-beat-timeout=90

################################## <<Nacos配置中心>> ###################################
# config配置详见:
#   https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-config.adoc
####  需要修改的配置迁移到了bootstrap.properties中，以下配置不用需改
####################################################################
### Nacos Config 目前提供了三种配置能力从 Nacos 拉取相关的配置
### A: 通过 spring.cloud.nacos.config.shared-dataids 支持多个共享 Data Id 的配置
### B: 通过 spring.cloud.nacos.config.ext-config[n].data-id 的方式支持多个扩展 Data Id 的配置
### C: 通过内部相关规则(应用名、应用名+ Profile )自动生成相关的 Data Id 配置
### 当三种方式共同使用时，他们的一个优先级关系是:A < B < C
#### "Nacos服务地址","配置扩展名","命名空间","配置分组" 和 "服务注册名",以及"当前环境spring.profiles.active"共同确认配置文件
# 必须使用 bootstrap.properties 配置文件来配置Nacos Server 地址
# 注意当你使用域名的方式来访问 Nacos 时，spring.cloud.nacos.config.server-addr 配置的方式为 域名:port。
# 例如 Nacos 的域名为abc.com.nacos，监听的端口为 80，则 spring.cloud.nacos.config.server-addr=abc.com.nacos:80。
# 注意 80 端口不能省略。
# 关闭动态刷新: 配置为false
spring.cloud.nacos.config.refresh-enabled=true
# 配置中心编码
spring.cloud.nacos.config.encode=UTF-8
# 配置文件的前缀,默认取值:spring.application.name
#spring.cloud.nacos.config.prefix=${spring.application.name}
# 配置对应的DataId(先取prefix，再取name，最后取spring.application.name)
#spring.cloud.nacos.config.name=${spring.application.name}
# 配置项对应的文件扩展名，目前支持 properties 和 yaml(yml)
spring.cloud.nacos.config.file-extension=properties
## 还有一种按模块化进行配置的方式,如下
#spring.cloud.nacos.config.ext-config[0].data-id=common.yaml
#spring.cloud.nacos.config.ext-config[0].group=common-yaml
#spring.cloud.nacos.config.ext-config[0].refresh=true
# 根据自身业务需求，可以配置多个ext-config,ext-config[n] 数字越大加载的优先级越高.
# 获取配置超时时间:客户端获取配置的超时时间(毫秒)
spring.cloud.nacos.config.timeout=3000
# 接入点:地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址
#spring.cloud.nacos.config.endpoint=
# 程序第一次启动时候从远程拉去配置(会有网络开销)
spring.cloud.nacos.config.enable-remote-sync-config=true
# 集群:配置成Nacos集群名称
#spring.cloud.nacos.config.cluster-name=nacos
