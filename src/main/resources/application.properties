####  项目访问相关配置
#####################################################################################
####  Nacos服务中心
#####################################################################################
# <!-- 开启注册发现中心 -->
spring.cloud.nacos.discovery.enabled=false
# <!-- 服务端地址:Nacos Server 启动监听的ip地址和端口 -->
spring.cloud.nacos.discovery.server-addr=192.168.0.205:8848
spring.cloud.nacos.discovery.context-path=nacos
# 指定注册发现中心命名空间
spring.cloud.nacos.discovery.namespace=ths
# 配置分组。
spring.cloud.nacos.discovery.group=DEFAULT_GROUP
# <!-- 注册到注冊中心的服务名，其他服务调用的标识 -->
spring.cloud.nacos.discovery.service=consumerDemo
#####################################################################################

####  Sentinel限流配置
#####################################################################################
# <!-- Sentinel开启Sentinel限流配置 -->
spring.cloud.sentinel.enabled=false
# <!-- Sentinel 控制台地址,配置中心可覆盖本属性 -->
spring.cloud.sentinel.transport.dashboard=192.168.0.205:8849
# Sentinel数据是否持久化到文件
spring.cloud.sentinel.file.save=true
# Sentinel数据持久化文件路径，空为 System.getProperty("user.home")
spring.cloud.sentinel.file.path=
#####################################################################################

####  sleuth+zipkin链路跟踪
#####################################################################################
# <!-- 开启sleuth+zipkin链路跟踪 -->
spring.sleuth.enabled=false
# <!-- zipkin server的请求地址 -->
spring.zipkin.base-url=http://192.168.0.205:8850/
#####################################################################################

################################## <<动态数据源配置>> ##################################
# 主数据源
spring.datasource.dynamic.primary=datasource01
## 数据源01
spring.datasource.dynamic.datasource.datasource01.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.dynamic.datasource.datasource01.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.dynamic.datasource.datasource01.url=jdbc:oracle:thin:@192.168.0.133/project.bm1oracle.com
spring.datasource.dynamic.datasource.datasource01.username=jdpdemo
spring.datasource.dynamic.datasource.datasource01.password=jdpdemo
## 数据源02
spring.datasource.dynamic.datasource.datasource02.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.dynamic.datasource.datasource02.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.dynamic.datasource.datasource02.url=jdbc:oracle:thin:@192.168.0.133/project.bm1oracle.com
spring.datasource.dynamic.datasource.datasource02.username=jdp
spring.datasource.dynamic.datasource.datasource02.password=jdp
#####################################################################################
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
################################## <<缓存配置>> ######################################
##缓存类型，redis或者ehcache
spring.cache.type=ehcache
############### <<redis配置>> ###########################
#redis配置
#Redis数据库索引（缓存将使用此索引编号的数据库）
spring.redis.database=1
#Redis服务器地址
spring.redis.host=192.168.0.205
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=
#连接超时时间 毫秒（默认2000）
#请求redis服务的超时时间,这里注意设置成0时取默认时间2000
spring.redis.timeout=2000
#连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=50
#连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=50
#连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
#建议不要为-1，连接池占满后无法获取连接时将在该时间内阻塞等待，超时后将抛出异常。
spring.redis.jedis.pool.max-wait=2000
#默认缓存
spring.redis.jdp.default.cache=JDP.CACHE

spring.redis.jdp.all.cache={"JDP.CACHE":36000,"JDP.PROJECT":36000}
############### <<ehcache配置>> ###########################
# ehcache配置文件路径
spring.cache.ehcache.config=classpath:ehcache.xml
#####################################################################################