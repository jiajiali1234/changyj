################################## <<datasource配置>> ######################################
# 是否使用seata,默认不使用
spring.datasource.dynamic.seata=false
# 是否启用严格模式,默认不启动. 严格模式下未匹配到数据源直接报错, 非严格模式下则使用默认数据源primary所设置的数据源
spring.datasource.dynamic.strict=true
# 是否使用p6spy输出，默认不输出
spring.datasource.dynamic.p6spy=true
# 是否使用spring actuator监控检查，默认不检查
spring.datasource.dynamic.health=true
######################################################
### 动态数据源优化配置 (以下是全局默认值，可以全局更改)
## druid连接池优化
# 初始化时建立物理连接的个数
spring.datasource.dynamic.druid.initialSize=3
# 最大连接池数量
spring.datasource.dynamic.druid.max-active=30
# 最小连接池数量
spring.datasource.dynamic.druid.min-idle=5
# 获取连接时最大等待时间，单位毫秒。
spring.datasource.dynamic.druid.max-wait=60000
# 是否缓存preparedStatement，也就是PSCache.PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.dynamic.druid.pool-prepared-statements=true
# 用来检测连接是否有效的sql，要求是一个查询语句
# spring.datasource.dynamic.druid.validation-query=SELECT 1
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.dynamic.druid.testOnBorrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.dynamic.druid.test-on-return=false
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.dynamic.druid.test-while-idle=true
# 快速失败
spring.datasource.dynamic.druid.fail-fast=true
# 创建连接超过错误次数退出
spring.datasource.dynamic.druid.break-after-acquire-failure=true
# 连接重试次数
spring.datasource.dynamic.druid.connectionErrorRetryAttempts=100

###  注意:动态数据源配置必须有一个数据源名称叫datasource01
###  如果需要修改默认的数据源名称,可以通过如下配置操作:
###  配置spring.datasource.dynamic.primary=xxx来变更默认数据源

################################## <<MyBatis配置>> ######################################
# mapper映射文件
mybatis.mapper-locations=classpath:mybatis/**/*Mapper.xml
# 扫描pojo包，给包下所有pojo对象起别名
mybatis.type-aliases-package=ths.boot
# 自定义TypeHandler包
mybatis.type-handlers-package=ths.boot.core.config.mybatis.typehandler
# 开启缓存
mybatis.configuration.cache-enabled=true
# mybatis日志打印设置(使用p6spy接管日志,此处注释掉)
#mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# 字段Map规则，下划线分割映射为驼峰结构
mybatis.configuration.map-underscore-to-camel-case=true
# 如果字段为NULL，也执行Setter，对于Map结构尤其有用，否则Map不会存在此key
mybatis.configuration.call-setters-on-nulls=true
# 当没有为参数提供特定的JDBC类型时，为空值指定JDBC类型
mybatis.configuration.jdbc-type-for-null=varchar
